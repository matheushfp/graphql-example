# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AffectedRowsOutput {
  count: Int!
}

input IntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

type Movie {
  description: String!
  director: String!
  id: String!
  title: String!
  year: Int!
}

input MovieCreateInput {
  description: String!
  director: String!
  id: String
  title: String!
  year: Int!
}

input MovieCreateManyInput {
  description: String!
  director: String!
  id: String
  title: String!
  year: Int!
}

input MovieOrderByWithRelationInput {
  description: SortOrder
  director: SortOrder
  id: SortOrder
  title: SortOrder
  year: SortOrder
}

enum MovieScalarFieldEnum {
  description
  director
  id
  title
  year
}

input MovieUpdateInput {
  description: StringFieldUpdateOperationsInput
  director: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  year: IntFieldUpdateOperationsInput
}

input MovieUpdateManyMutationInput {
  description: StringFieldUpdateOperationsInput
  director: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  year: IntFieldUpdateOperationsInput
}

input MovieWhereInput {
  AND: [MovieWhereInput!]
  NOT: [MovieWhereInput!]
  OR: [MovieWhereInput!]
  description: StringFilter
  director: StringFilter
  id: StringFilter
  title: StringFilter
  year: IntFilter
}

input MovieWhereUniqueInput {
  id: String
}

type Mutation {
  createManyMovie(data: [MovieCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createOneMovie(data: MovieCreateInput!): Movie!
  deleteManyMovie(where: MovieWhereInput): AffectedRowsOutput!
  deleteOneMovie(where: MovieWhereUniqueInput!): Movie
  updateManyMovie(data: MovieUpdateManyMutationInput!, where: MovieWhereInput): AffectedRowsOutput!
  updateOneMovie(data: MovieUpdateInput!, where: MovieWhereUniqueInput!): Movie
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

type Query {
  findFirstMovie(cursor: MovieWhereUniqueInput, distinct: [MovieScalarFieldEnum!], orderBy: [MovieOrderByWithRelationInput!], skip: Int, take: Int, where: MovieWhereInput): Movie
  movie(where: MovieWhereUniqueInput!): Movie
  movies(cursor: MovieWhereUniqueInput, distinct: [MovieScalarFieldEnum!], orderBy: [MovieOrderByWithRelationInput!], skip: Int, take: Int, where: MovieWhereInput): [Movie!]!
}

enum QueryMode {
  default
  insensitive
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}